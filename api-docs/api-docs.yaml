---
openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: https://localhost:8443
  description: Generated server url
tags:
- name: Review Controller
  description: Endpoints for managing reviews
paths:
  "/api/users/{id}":
    get:
      tags:
      - user-rest-controller
      summary: Get user based on ID
      description: Returns the user whose ID matches the one on the URL.
      operationId: getUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: User returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
        '400':
          description: Bad request
        '404':
          description: User not found
    put:
      tags:
      - user-rest-controller
      summary: Update an user
      description: Updates the information and resources of an user.
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserUpdateDto"
        required: true
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request
        '403':
          description: The request is unauthorized
        '404':
          description: Not found
    delete:
      tags:
      - user-rest-controller
      summary: Delete user
      description: Users an activity and returns that deleted user.
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Not allowed
  "/api/users/{id}/image":
    get:
      tags:
      - user-rest-controller
      summary: Get the user photo
      description: Returns the user image based on the ID
      operationId: getUserImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Image returned successfully
        '400':
          description: Bad request
        '404':
          description: User not found
    put:
      tags:
      - user-rest-controller
      summary: Update image of user based on ID
      description: Update the image of an user whose ID matches the one on the URL.
      operationId: replaceUserImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Image updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
        '400':
          description: Bad request
        '404':
          description: User not found
        '405':
          description: Not allowed
    delete:
      tags:
      - user-rest-controller
      summary: Delete user image
      description: Deletes an user imageand returns that deleted user.
      operationId: deleteUserImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: User deleted successfully
          content:
            "*/*":
              schema:
                type: object
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Not allowed
  "/api/reviews/{reviewId}":
    put:
      tags:
      - Review Controller
      summary: Update a review
      description: Updates an existing review. Requires authentication and ownership
        of the review.
      operationId: updateReview
      parameters:
      - name: reviewId
        in: path
        description: ID of the review to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NewReviewDto"
        required: true
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReviewDto"
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized - User not authenticated
        '403':
          description: Forbidden - User does not own the review
        '404':
          description: Review not found
        '500':
          description: Internal server error
    delete:
      tags:
      - Review Controller
      summary: Delete a review
      description: Deletes an existing review by its ID.
      operationId: deleteReviewById
      parameters:
      - name: reviewId
        in: path
        description: ID of the review to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Review deleted successfully
        '404':
          description: Review not found
        '500':
          description: Internal server error
  "/api/activities/{id}":
    get:
      tags:
      - activity-rest-controller
      summary: Get activity based on ID
      description: Returns the activity whose ID matches the one on the URL.
      operationId: getActivity
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Activity returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ActivityDto"
        '400':
          description: Bad request
        '404':
          description: Activity not found
    put:
      tags:
      - activity-rest-controller
      summary: Update an activity
      description: Updates the information and resources of an activity.
      operationId: updateActivity
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ActivityUpdateDto"
        required: true
      responses:
        '200':
          description: Activity updated successfully
        '400':
          description: Bad request
        '403':
          description: The request is unauthorized
        '404':
          description: Not found
    delete:
      tags:
      - activity-rest-controller
      summary: Delete activity
      description: Deletes an activity and returns that deleted activity.
      operationId: deleteActivity
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Activity deleted successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ActivityDto"
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Not allowed
  "/api/activities/{id}/image":
    get:
      tags:
      - activity-rest-controller
      summary: Get the activity photo
      description: Returns the activity image based on the ID
      operationId: downloadImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Image returned successfully
        '400':
          description: Bad request
        '404':
          description: Activity not found
    put:
      tags:
      - activity-rest-controller
      summary: Update image of activity based on ID
      description: Update the image of an activity whose ID matches the one on the
        URL.
      operationId: updateImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ActivityDto"
        '400':
          description: Bad request
        '404':
          description: Activity not found
        '405':
          description: Not allowed
    post:
      tags:
      - activity-rest-controller
      summary: Create new activity image
      description: Creates a new activity image and returns that new activity image.
      operationId: uploadImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Activity image created successfully
        '403':
          description: The request is unauthorized
        '404':
          description: Not found
    delete:
      tags:
      - activity-rest-controller
      summary: Delete activity image
      description: Deletes an activity imageand returns that deleted activity.
      operationId: deleteImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Activity deleted successfully
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Not allowed
  "/api/users/":
    get:
      tags:
      - user-rest-controller
      summary: Get every users
      description: Returns a list with every user.
      operationId: getUsers_1
      responses:
        '200':
          description: List with users returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: User not found
    post:
      tags:
      - user-rest-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NewUserDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDto"
  "/api/reviews/activity/{activityId}":
    get:
      tags:
      - Review Controller
      summary: Get reviews by activity ID
      description: Returns a paginated list of reviews for a specific activity.
      operationId: getReviewsByActivity
      parameters:
      - name: activityId
        in: path
        description: ID of the activity to fetch reviews for
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: Page number (starting from 0)
        required: false
        schema:
          type: integer
          format: int32
          default: 0
        example: 0
      responses:
        '200':
          description: Reviews returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReviewDto"
        '400':
          description: Invalid activity ID supplied
        '404':
          description: Activity not found
        '500':
          description: Internal server error
    post:
      tags:
      - Review Controller
      summary: Add a review to an activity
      description: Adds a new review to the specified activity. Requires authentication.
      operationId: addReview
      parameters:
      - name: activityId
        in: path
        description: ID of the activity to add the review to
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NewReviewDto"
        required: true
      responses:
        '200':
          description: Review added successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReviewDto"
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized - User not authenticated
        '404':
          description: Activity or user not found
        '500':
          description: Internal server error
  "/api/auth/refresh":
    post:
      tags:
      - login-controller
      summary: Refresh Token
      description: Refreshes the access token using the refresh token.
      operationId: refreshToken
      parameters:
      - name: RefreshToken
        in: cookie
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthResponse"
        '400':
          description: Bad Request - Missing or invalid refresh token
        '401':
          description: Unauthorized - Invalid refresh token
        '500':
          description: Internal Server Error
  "/api/auth/logout":
    post:
      tags:
      - login-controller
      summary: Logout
      description: Logs out the current user.
      operationId: logOut
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthResponse"
        '500':
          description: Internal Server Error
  "/api/auth/login":
    post:
      tags:
      - login-controller
      summary: Login
      description: Authenticate user and generate access token.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LoginRequest"
        required: true
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthResponse"
        '401':
          description: Unauthorized - Invalid credentials
        '500':
          description: Internal Server Error
  "/api/activities/{id}/reserve":
    post:
      tags:
      - activity-rest-controller
      summary: Reserve an activity
      description: A user reserve an activity and returns a .pdf with the activity
        information.
      operationId: reserveActivity
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '201':
          description: User reserve an activity successfully
          content:
            "*/*":
              schema:
                type: array
                items:
                  type: string
                  format: byte
        '403':
          description: The request is unauthorized
        '404':
          description: Activity not found
  "/api/activities/":
    get:
      tags:
      - activity-rest-controller
      summary: Get every activities
      description: Returns a list with every activity.
      operationId: getActivities_1
      responses:
        '200':
          description: List with activities returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ActivityDto"
        '400':
          description: Bad request
        '404':
          description: Activity not found
    post:
      tags:
      - activity-rest-controller
      summary: Create new activity
      description: Creates a new activity and returns that new activity.
      operationId: createActivity
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NewActivityDto"
        required: true
      responses:
        '201':
          description: Activity created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ActivityDto"
        '403':
          description: The request is unauthorized
        '404':
          description: Not found
  "/debug/activities":
    get:
      tags:
      - activity-controller
      operationId: debugActivities
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
                additionalProperties:
                  type: object
  "/api/users/pageable":
    get:
      tags:
      - user-rest-controller
      summary: Get every users
      description: Returns a list with every user.
      operationId: getUsers
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 4
      responses:
        '200':
          description: List with users returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDto"
        '400':
          description: Bad request
        '404':
          description: User not found
  "/api/statistics/review-statistics":
    get:
      tags:
      - statistics-rest-controller
      operationId: getReviewStatistics
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ReviewStatisticsDto"
  "/api/statistics/general-statistics":
    get:
      tags:
      - statistics-rest-controller
      operationId: getGeneralStatistics
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/GeneralStatisticsDto"
  "/api/statistics/activities-by-month":
    get:
      tags:
      - statistics-rest-controller
      operationId: getActivitiesByMonth
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ActivitiesByMonthDto"
  "/api/activities/users/{userId}/recommended-activities":
    get:
      tags:
      - activity-rest-controller
      summary: Get activities recommended by user
      description: Returns a paginated list of activities recommended in which the
        user is enrolled.
      operationId: getRecommendedActivities
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 4
      responses:
        '200':
          description: Activities recommended returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ActivityDto"
        '400':
          description: Bad request
        '404':
          description: User not found
  "/api/activities/user/{userId}":
    get:
      tags:
      - activity-rest-controller
      summary: Get activities by user
      description: Returns a paginated list of activities in which the user is enrolled.
      operationId: getActivitiesByUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 2
      responses:
        '200':
          description: Activities returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ActivityDto"
        '400':
          description: Bad request
        '404':
          description: User not found
  "/api/activities/search":
    get:
      tags:
      - activity-rest-controller
      summary: Search an activity by place
      description: Returns a activities list found by place.
      operationId: searchActivitiesByPlace
      parameters:
      - name: placeId
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 2
      responses:
        '200':
          description: List with activities returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ActivityDto"
        '400':
          description: Bad request
        '404':
          description: Activities not found
  "/api/activities/pageable":
    get:
      tags:
      - activity-rest-controller
      summary: Get every activities
      description: Returns a list with every activity.
      operationId: getActivities
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 4
      responses:
        '200':
          description: List with activities returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ActivityDto"
        '400':
          description: Bad request
        '404':
          description: Activity not found
components:
  schemas:
    UserUpdateDto:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        phone:
          type: string
        dni:
          type: string
        imageBoolean:
          type: boolean
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        phone:
          type: string
        dni:
          type: string
        roles:
          type: array
          items:
            type: string
        imageBoolean:
          type: boolean
        password:
          type: string
    NewReviewDto:
      type: object
      properties:
        starsValue:
          type: integer
          format: int32
        comment:
          type: string
        userId:
          type: integer
          format: int64
      description: Review data to add
    ReviewDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        comment:
          type: string
        starsValue:
          type: integer
          format: int32
        creationDate:
          type: string
          format: date-time
        userFullName:
          type: string
    ActivityUpdateDto:
      type: object
      properties:
        name:
          type: string
        category:
          type: string
        description:
          type: string
        imageBoolean:
          type: boolean
        vacancy:
          type: integer
          format: int32
        activityDate:
          type: string
          format: date-time
        placeId:
          type: integer
          format: int64
    ActivityDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        category:
          type: string
        description:
          type: string
        vacancy:
          type: integer
          format: int32
        creationDate:
          type: string
          format: date-time
        activityDate:
          type: string
          format: date-time
        place:
          "$ref": "#/components/schemas/PlaceDto"
        reviews:
          type: array
          items:
            "$ref": "#/components/schemas/ReviewDto"
        imageBoolean:
          type: boolean
    PlaceDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
    NewUserDto:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        phone:
          type: string
        dni:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            type: string
        imageBoolean:
          type: boolean
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
        message:
          type: string
        error:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    NewActivityDto:
      type: object
      properties:
        name:
          type: string
        category:
          type: string
        description:
          type: string
        imageBoolean:
          type: boolean
        vacancy:
          type: integer
          format: int32
        creationDate:
          type: string
          format: date-time
        activityDate:
          type: string
          format: date-time
        placeId:
          type: integer
          format: int64
    ReviewStatisticsDto:
      type: object
      properties:
        starsValue:
          type: integer
          format: int32
        count:
          type: integer
          format: int64
    GeneralStatisticsDto:
      type: object
      properties:
        userCount:
          type: integer
          format: int64
        activityCount:
          type: integer
          format: int64
        placeCount:
          type: integer
          format: int64
    ActivitiesByMonthDto:
      type: object
      properties:
        month:
          type: integer
          format: int32
        count:
          type: integer
          format: int64
